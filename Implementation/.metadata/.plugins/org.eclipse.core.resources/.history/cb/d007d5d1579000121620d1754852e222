package sortAlgo;

import java.util.*;

public class MethodsProducer {
	/**
	 * Randomly produce methods with partial order 
	 */
	final static int THREADS = 2 ;
	final static int M_PerTHREAD = 3; // method per thread
	final static double ratio  = M_PerTHREAD / THREADS;
	Tuple<int[][] , Integer> methodsProduce(){
		int methodsNum = THREADS*M_PerTHREAD; 
		List<Integer> preList = new LinkedList<Integer>();
		List<Integer> sucList = new LinkedList<Integer>();
		for (int t = 1 ; t <= THREADS ;t ++ ){
			for(int m = 1 ; m < M_PerTHREAD; m ++ ){
				preList.add((t - 1) * THREADS + m);
				sucList.add((t - 1) * THREADS + m + 1);
				Random rand = new Random(47);
				int vic = rand.nextInt(THREADS);
				while(vic > 3){// Pick a victim with probability over 60%  
					if (vic == t) continue; 
					else{
						preList.add((t - 1) * THREADS + m);
						sucList.add(vic*(ratio) > m ? ((vic - 1) * THREADS + (int )(vic * ratio))
								:((vic - 1)*THREADS + m + 1));
					}
					vic = rand.nextInt(THREADS);
				}
			}
		}//for
		int len = preList.size();				
		int[][] orderArr = new int[len][2];
		for( ; len-- > 0; ){
			orderArr[len][0] = preList.remove(len);
			orderArr[len][1] = sucList.remove(len);
		}
		
		return new Tuple<int[][], Integer> (orderArr , (THREADS)*M_PerTHREAD);
	}
}
