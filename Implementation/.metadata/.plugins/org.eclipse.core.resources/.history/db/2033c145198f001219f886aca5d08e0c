package concurrentQueue;

import java.util.ArrayList;
import java.util.Collections;
import java.util.LinkedList;
import java.util.List;

public class Queue_With_Stealing extends Thread{
	final static int STEAL_BOUND = 100; 
	ConcurrentLinkedListQueue[] conQueue;
	ConcurrentLinkedListQueue clq;
	int clqID;
	//Thread[] thread=new Thread[THREAD_NUM];
	public Queue_With_Stealing(ConcurrentLinkedListQueue clq, int clqID, ConcurrentLinkedListQueue[] conQueue) {
		this.clq = clq;
		this.clqID = clqID;
		this.conQueue = conQueue;
	}
	
		public void run(){
			List<Integer> randList = new ArrayList<Integer>();
			for(int i = 0 ; i < this.conQueue.length; i ++){
				if(i == clqID)
					continue;
				randList.add(i);
			}
			System.out.println(clqID);
			Collections.shuffle(randList);
			
			while(!clq.isEmpty()){
				//Steal starts
				//Pick a victim randomly ;
				int stealTry = 0 ; 
				while(stealTry < STEAL_BOUND){
			}
				break;
		}
	}
}
class ConcurrentLinkedListQueue {
	private List<Object> list = new LinkedList<Object>();
	public void enqueue(Object obj){
		list.add(obj);
	}
	
	public Object dequeue(){
		if(list.isEmpty())
			return null;
		Object obj = ((LinkedList<Object>)list).getFirst();
		return ((LinkedList<Object>) list).removeFirst();
	}
	
	public boolean isEmpty(){
		return (list == null);
	}
}
