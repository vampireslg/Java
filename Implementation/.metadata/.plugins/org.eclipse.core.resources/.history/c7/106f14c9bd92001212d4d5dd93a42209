package smartalgorithm;
import java.util.*;
import java.util.Map.Entry;

public class HashSort {
	final int MAX = 10000 ;
	int nodeNum = 5; 
	int tNum = 2 ; 
	void filterAndPrint(HashMap<Integer, int[]> locMap, HashMap<Integer, int[]> nodeMap){
		int[] locArr = new int[nodeNum];
		int[] nodeArr = new int[nodeNum]; 
		for(int i= 0 ; i < nodeNum ; i ++){ // Store primitive cirtical nodes order 
			//locArr[i] = locMap.get(i);
		}
		if(locMap.get(nodeNum)[0] != 0 ) //Means all the nodes been in the critical path .
			printMap(locMap);
		else{
		//	int[] arr
		}
			
	}
	
	void printMap(HashMap<Integer, int[]> hm){
		Iterator<Map.Entry<Integer, int[]>> iter = hm.entrySet().iterator();
		while(iter.hasNext()){	
			Map.Entry<Integer, int[]> et =  (Map.Entry<Integer, int[]>) iter.next() ;
			int node = et.getKey();
			System.out.print("---" + node);
		}
		System.out.println();
	}
	
	void initLocMap(int[][] initArr){
		//locMap Key : location ; Value : node's value .
		CriticalPath cp = new CriticalPath();
		LinkedList<Integer> criticalL =  cp.searchCriticalPath(initArr);
		HashMap<Integer, Integer> locMap = new HashMap<>();
		int con = 0 ;
		for (int item : criticalL){
			locMap.put(con ++ , item);
		}
		for(; con < nodeNum; ){// Rest location in critical path stores 0 ;
			locMap.put(con ++ , 0 );
		}
	}
	
	 void initNodeMap(int[][] initArr){
		 //nodeMap stores nodes location_precursor_successor array ,first slot in which stores 
		 // location this node be in the critical path (initiation value 0 ); 
		 //Second slot and the third one each stores location of the its last precursor(if none stores 2)
		 // and that of its first successor (if none stores 2*threads number + 3)in this array .
		
		HashMap<Integer, int[]> nodeMap = new HashMap<>();
		int[][] nodeArr = new int[nodeNum][2*tNum + 3];
		
		for(int i = 0 ; i < nodeNum; i ++ ){
			int pre = 2 , suc= 2*tNum + 3  ;	//2 means the 3rd slot in array ; store successor from tail to head .
			nodeArr[i][0] = 0 ;	//init location is 0 ;
			for(int[] row : initArr){
				if(row[0] == (i+1)){ //row[1] is its successor .
					nodeArr[i][-- suc] = row[1];
				}
				else if(row[1] == (i+1)){	//row[0] is its precursor 
					nodeArr[i][ ++ pre ] = row[0];
				}
			}
			nodeArr[i][1] = pre; 
			nodeArr[i][2] = suc ;
			nodeArr[i][0] = MAX ;
		}
		int loc = 0 ;
		CriticalPath cp = new CriticalPath();
		LinkedList<Integer> criticalL =  cp.searchCriticalPath(initArr);
		for(int item : criticalL){ // Location of critical nodes is set to 0 .. critical's length - 1 .
			nodeArr[item][0] = loc ++ ; 
		}
		
		int cr= 0 ;
		for(; cr < nodeNum; ){	// 
			nodeMap.put(cr, nodeArr[cr]);
			cr ++ ;
		}
		
		
		
		
		// Test output DELETE ME after ALL work is Done 
		Iterator iter = nodeMap.entrySet().iterator();
		while(iter.hasNext()){
			Map.Entry entry = (Map.Entry) iter.next();
			int[] arr = (int[]) entry.getValue();
			int nu = (int) entry.getKey();
			System.out.print("------" + nu);
			for(int item : arr){
				System.out.print("----" + item );
			}
			System.out.println("");
		}
		
		printMap(nodeMap);
		
		for(int key :nodeMap.keySet()){
			System.out.println("-------" + key );
		}
		
	}

//EO--HashSort
}
