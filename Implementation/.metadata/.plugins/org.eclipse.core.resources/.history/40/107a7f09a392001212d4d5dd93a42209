package smartalgorithm;
import java.util.*;

public class HashSort {
	int nodeNum = 5; 
	int tNum = 2 ; 
	void filterAndPrint(HashMap hm){
		
	}
	void initLocMap(int[][] initArr){
		//locMap Key : location ; Value : node's value .
		CriticalPath cp = new CriticalPath();
		LinkedList<Integer> criticalL =  cp.searchCriticalPath(initArr);
		HashMap<Integer, Integer> locMap = new HashMap<>();
		int con = 0 ;
		for (int item : criticalL){
			locMap.put(con ++ , item);
		}
		for(; con < nodeNum; ){// Rest location in critical path stores 0 ;
			locMap.put(con ++ , 0 );
		}
		for(int i =0 ; i < con ; i ++ )
			System.out.println("------" + locMap.get(i));
		
	}
	void initNodeMap(int[][] initArr){
		/** 
		 *	<Node ,<Loc, DirectedPreNodes array, DirectedSucNodes array>>
		 *	lpsArr Means array[0] : location in CP , array[1], last PRE node's location in this array ,which should 
		 *  be larger than 3 (the fourth location in array ) 
		 *	array[2] , first SUC node's location in this array (Smaller than 2*nodeNum+2);
		 */
		HashMap[] nodeMap = new HashMap[nodeNum];
		int[][] nodeArr = new int[nodeNum][2*tNum + 3];
		// No more than 2*threads number plus 3 (0 : location ,1 <pre> , 2 <suc>)
		
		for(int i = 0 ; i < nodeNum; i ++ ){
			int pre = 2 , suc= 2*tNum + 3  ;	//2 means the 3rd slot in array ; store successor from tail to head .
			nodeArr[i][0] = 0 ;	//init location is 0 ;
			for(int[] row : initArr){
				if(row[0] == (i+1)){ //row[1] is its successor .
					nodeArr[i][-- suc] = row[1];
				}
				else if(row[1] == (i+1)){	//row[0] is its precursor 
					nodeArr[i][ ++ pre ] = row[0];
				}
			}
			nodeArr[i][1] = pre; 
			nodeArr[i][2] = suc ;
		}
		
		// Test output
		/*
		for(int i = 0 ; i < nodeNum ; i ++){
			System.out.print("----" + i);
			for(int item : nodeArr[i]){
				System.out.print("---" + item );
			}
			System.out.println();
		}
		for(int i = 0 ;  i < nodeNum; i ++)
			nodeMap[i] = new HashMap<Integer, int[]>();
		*/
	}

//EO--HashSort
}
