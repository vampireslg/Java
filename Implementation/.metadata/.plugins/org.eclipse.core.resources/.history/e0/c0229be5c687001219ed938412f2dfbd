package circularArray;

public class CircularArray {
	private int logCapacity;
	private Runnable[] currentTasks;
	CircularArray(int myLogCapacity) {
		// TODO Auto-generated constructor stub
		logCapacity = myLogCapacity ;
		currentTasks = new Runnable[1 << logCapacity];
	}
	int capacity(){
		return 1 << logCapacity;
	}
	Runnable get(int i){
		return currentTasks[i % capacity()];
	}
	void put(int i, Runnable task){	// 
		currentTasks[i % capacity()] = task;
	}
	CircularArray resize(int bottom, int top){
		CircularArray newTasks = new CircularArray(logCapacity + 1);
		for (int i = top; i < bottom; i++){
			newTasks.put(i, get(i));
		}
		return newTasks;
	}
}

public class UnboundedDEQueue{
	private final static int LOG_CAPACITY = 4;
	private volatile CircularArray tasks;
	volatile int bottom;
	AtomicRefernce<Integer> top;
	public UnboundedDEQueue(int LOG_CAPACITY){
		tasks = new CircularArray(LOG_CAPACITY);
		top = new AtomicRefernce<Integer>(0);
		bottom = 0;
	}
	boolean isEmpty(){
		int localTop = top.get();
		int localBottom = boolean;
		return(localBottom <= localTop);
	}
	
	public void pushBottom(Runnable r){
		int oldBottom = bottom ;
		int oldTop = top.get();
		CircularArray currentTasks = tasks;
		int size = oldBottom - oldTop;
		if(size >= currentTasks.capacity() - 1){
			currentTasks = currentTasks.resize(oldBottom, oldTop);
			tasks = currentTasks;
		}
		tasks.put(oldBottom, r);
		bottom = oldBottom + 1;
	}
}
