package sortAlgo;

import java.util.*;

public class MethodsProducer {
	/**
	 * Randomly produce methods with partial order 
	 */
	final static int THREADS = 3 ;
	final static int M_PerTHREAD = 3; // method per thread
	final static double ratio  = M_PerTHREAD / THREADS;
	public static Tuple<int[][] , Integer> methodsProduce(){
		//	int methodsNum = THREADS*M_PerTHREAD;
		int tie = 0 ; // Number of children nodes a node could has
		
		List<Integer> preList = new LinkedList<Integer>();
		List<Integer> sucList = new LinkedList<Integer>();
		Random rand = new Random(45);
		Random proR = new Random();
		for (int t = 0 ; t < THREADS ;t ++ ){
			for(int m = 1 ; m < M_PerTHREAD; m ++ ){
				preList.add(t  * M_PerTHREAD + m);
				sucList.add(t  * M_PerTHREAD + m + 1);
				
				
				int vicT = rand.nextInt(THREADS);
				
				int pro = proR.nextInt(10);
				while(pro > 2 && tie < M_PerTHREAD){// Pick a victim with probability over 70%  
					if (vicT == t)  ; // victim could not be itself ;
					else{
						preList.add( t  * M_PerTHREAD + m);
						sucList.add(vicT*(ratio) > m ? ((vicT - 1) * M_PerTHREAD + (int )(vicT * ratio))
								:((vicT - 1)*M_PerTHREAD + m + 1));
					}
					vicT = rand.nextInt(THREADS);
					pro = proR.nextInt(10);
					tie ++ ;
				}
			}
		}//for
		int len = preList.size();				
		int[][] orderArr = new int[len][2];
		for( ; len-- > 0; ){
			orderArr[len][0] = preList.remove(len);
			//System.out.println("Line --- " + len + " --- Column ------" + 1 + " ---- PreValue : -----" + orderArr[len][0]);
			orderArr[len][1] = sucList.remove(len);
			//System.out.println("Line --- " + len + " --- Column ------" + 2 + " ---- SucValue : -----" + orderArr[len][1]);
		}
				
		return new Tuple<int[][], Integer> (orderArr , (THREADS)*M_PerTHREAD);
	}
}
