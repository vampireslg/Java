package sortAlgo;
import java.util.LinkedList;
import java.util.Iterator;
import java.util.List;

public class NodeInit_TwoDimArray {
	
	public static LinkedList<Node> nodeInitiation_Array (int[][] tupleArr, int nodeNum, LinkedList<Node> nodeList){
		for( ; nodeNum -- > 0 ; ) {
			nodeList.add(new Node(nodeNum, new LinkedList<Integer>(), new LinkedList<Integer>()));
		}
		
		for (int[] item : tupleArr){
			nodeList.get(item[0] - 1).getSucList().add(item[1]);
			nodeList.get(item[1] - 1).getPreList().add(item[0]);
		}
		
		for(Node node : nodeList){ // Trans the preList of parent to that of it's children 
			Iterator<Integer> iter = node.getSucList().iterator();
			while(iter.hasNext()){
				int next = iter.next();
				//Note that the node ID is x - 1 , not x ;
				copyPreList(node.getPreList(), nodeList.get(next - 1).getPreList()); 
			}
			
		}
		return nodeList; 
	}
	
	private static void copyPreList(List<Integer> preList,
			List<Integer> preList2) {
		// TODO Auto-generated method stub
		// Need filter repeat items . 
		Iterator<Integer> iter = preList.iterator();
		while(iter.hasNext()){
			int item = iter.next();
			if (preList2.contains(item))
				continue;
			else 
				preList2.add(item);
		}
	}

	
}
